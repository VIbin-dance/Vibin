import { __awaiter, __generator } from "tslib";
import { ProviderError } from "@aws-sdk/property-provider";
import { readFileSync } from "fs";
var ENV_TOKEN_FILE = "AWS_WEB_IDENTITY_TOKEN_FILE";
var ENV_ROLE_ARN = "AWS_ROLE_ARN";
var ENV_ROLE_SESSION_NAME = "AWS_ROLE_SESSION_NAME";
/**
 * Represents OIDC credentials from a file on disk.
 */
export var fromTokenFile = function (init) { return function () { return __awaiter(void 0, void 0, void 0, function () {
    var webIdentityTokenFile, roleArn, roleSessionName, roleAssumerWithWebIdentity;
    var _a;
    return __generator(this, function (_b) {
        webIdentityTokenFile = init.webIdentityTokenFile, roleArn = init.roleArn, roleSessionName = init.roleSessionName, roleAssumerWithWebIdentity = init.roleAssumerWithWebIdentity;
        if (!roleAssumerWithWebIdentity) {
            throw new ProviderError("Role Arn '" + (roleArn !== null && roleArn !== void 0 ? roleArn : process.env[ENV_ROLE_ARN]) + "' needs to be assumed with web identity," +
                " but no role assumption callback was provided.", false);
        }
        return [2 /*return*/, roleAssumerWithWebIdentity({
                WebIdentityToken: readFileSync(webIdentityTokenFile !== null && webIdentityTokenFile !== void 0 ? webIdentityTokenFile : process.env[ENV_TOKEN_FILE], { encoding: "ascii" }),
                RoleArn: roleArn !== null && roleArn !== void 0 ? roleArn : process.env[ENV_ROLE_ARN],
                RoleSessionName: (_a = roleSessionName !== null && roleSessionName !== void 0 ? roleSessionName : process.env[ENV_ROLE_SESSION_NAME]) !== null && _a !== void 0 ? _a : "aws-sdk-js-session-" + Date.now(),
            })];
    });
}); }; };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnJvbVRva2VuRmlsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9mcm9tVG9rZW5GaWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFFM0QsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLElBQUksQ0FBQztBQUVsQyxJQUFNLGNBQWMsR0FBRyw2QkFBNkIsQ0FBQztBQUNyRCxJQUFNLFlBQVksR0FBRyxjQUFjLENBQUM7QUFDcEMsSUFBTSxxQkFBcUIsR0FBRyx1QkFBdUIsQ0FBQztBQW9EdEQ7O0dBRUc7QUFDSCxNQUFNLENBQUMsSUFBTSxhQUFhLEdBQUcsVUFBQyxJQUF1QixJQUF5QixPQUFBOzs7O1FBQ3BFLG9CQUFvQixHQUEyRCxJQUFJLHFCQUEvRCxFQUFFLE9BQU8sR0FBa0QsSUFBSSxRQUF0RCxFQUFFLGVBQWUsR0FBaUMsSUFBSSxnQkFBckMsRUFBRSwwQkFBMEIsR0FBSyxJQUFJLDJCQUFULENBQVU7UUFFNUYsSUFBSSxDQUFDLDBCQUEwQixFQUFFO1lBQy9CLE1BQU0sSUFBSSxhQUFhLENBQ3JCLGdCQUFhLE9BQU8sYUFBUCxPQUFPLGNBQVAsT0FBTyxHQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLDhDQUEwQztnQkFDekYsZ0RBQWdELEVBQ2xELEtBQUssQ0FDTixDQUFDO1NBQ0g7UUFFRCxzQkFBTywwQkFBMEIsQ0FBQztnQkFDaEMsZ0JBQWdCLEVBQUUsWUFBWSxDQUFDLG9CQUFvQixhQUFwQixvQkFBb0IsY0FBcEIsb0JBQW9CLEdBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUUsRUFBRSxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsQ0FBQztnQkFDM0csT0FBTyxFQUFFLE9BQU8sYUFBUCxPQUFPLGNBQVAsT0FBTyxHQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFFO2dCQUM5QyxlQUFlLFFBQUUsZUFBZSxhQUFmLGVBQWUsY0FBZixlQUFlLEdBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsQ0FBQyxtQ0FBSSx3QkFBc0IsSUFBSSxDQUFDLEdBQUcsRUFBSTthQUM3RyxDQUFDLEVBQUM7O0tBQ0osRUFoQjZFLENBZ0I3RSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUHJvdmlkZXJFcnJvciB9IGZyb20gXCJAYXdzLXNkay9wcm9wZXJ0eS1wcm92aWRlclwiO1xuaW1wb3J0IHsgQ3JlZGVudGlhbFByb3ZpZGVyLCBDcmVkZW50aWFscyB9IGZyb20gXCJAYXdzLXNkay90eXBlc1wiO1xuaW1wb3J0IHsgcmVhZEZpbGVTeW5jIH0gZnJvbSBcImZzXCI7XG5cbmNvbnN0IEVOVl9UT0tFTl9GSUxFID0gXCJBV1NfV0VCX0lERU5USVRZX1RPS0VOX0ZJTEVcIjtcbmNvbnN0IEVOVl9ST0xFX0FSTiA9IFwiQVdTX1JPTEVfQVJOXCI7XG5jb25zdCBFTlZfUk9MRV9TRVNTSU9OX05BTUUgPSBcIkFXU19ST0xFX1NFU1NJT05fTkFNRVwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIEFzc3VtZVJvbGVXaXRoV2ViSWRlbnRpdHlQYXJhbXMge1xuICAvKipcbiAgICogPHA+VGhlIEFtYXpvbiBSZXNvdXJjZSBOYW1lIChBUk4pIG9mIHRoZSByb2xlIHRoYXQgdGhlIGNhbGxlciBpcyBhc3N1bWluZy48L3A+XG4gICAqL1xuICBSb2xlQXJuOiBzdHJpbmc7XG4gIC8qKlxuICAgKiA8cD5BbiBpZGVudGlmaWVyIGZvciB0aGUgYXNzdW1lZCByb2xlIHNlc3Npb24uIFR5cGljYWxseSwgeW91IHBhc3MgdGhlIG5hbWUgb3IgaWRlbnRpZmllclxuICAgKiAgICAgICAgICB0aGF0IGlzIGFzc29jaWF0ZWQgd2l0aCB0aGUgdXNlciB3aG8gaXMgdXNpbmcgeW91ciBhcHBsaWNhdGlvbi4gVGhhdCB3YXksIHRoZSB0ZW1wb3JhcnlcbiAgICogICAgICAgICAgc2VjdXJpdHkgY3JlZGVudGlhbHMgdGhhdCB5b3VyIGFwcGxpY2F0aW9uIHdpbGwgdXNlIGFyZSBhc3NvY2lhdGVkIHdpdGggdGhhdCB1c2VyLiBUaGlzXG4gICAqICAgICAgICAgIHNlc3Npb24gbmFtZSBpcyBpbmNsdWRlZCBhcyBwYXJ0IG9mIHRoZSBBUk4gYW5kIGFzc3VtZWQgcm9sZSBJRCBpbiB0aGVcbiAgICogICAgICAgICAgICAgPGNvZGU+QXNzdW1lZFJvbGVVc2VyPC9jb2RlPiByZXNwb25zZSBlbGVtZW50LjwvcD5cbiAgICogICAgICAgICAgPHA+VGhlIHJlZ2V4IHVzZWQgdG8gdmFsaWRhdGUgdGhpcyBwYXJhbWV0ZXIgaXMgYSBzdHJpbmcgb2YgY2hhcmFjdGVyc1xuICAgKiAgICAgY29uc2lzdGluZyBvZiB1cHBlci0gYW5kIGxvd2VyLWNhc2UgYWxwaGFudW1lcmljIGNoYXJhY3RlcnMgd2l0aCBubyBzcGFjZXMuIFlvdSBjYW5cbiAgICogICAgIGFsc28gaW5jbHVkZSB1bmRlcnNjb3JlcyBvciBhbnkgb2YgdGhlIGZvbGxvd2luZyBjaGFyYWN0ZXJzOiA9LC5ALTwvcD5cbiAgICovXG4gIFJvbGVTZXNzaW9uTmFtZTogc3RyaW5nO1xuICAvKipcbiAgICogPHA+VGhlIE9BdXRoIDIuMCBhY2Nlc3MgdG9rZW4gb3IgT3BlbklEIENvbm5lY3QgSUQgdG9rZW4gdGhhdCBpcyBwcm92aWRlZCBieSB0aGUgaWRlbnRpdHlcbiAgICogICAgICAgICAgcHJvdmlkZXIuIFlvdXIgYXBwbGljYXRpb24gbXVzdCBnZXQgdGhpcyB0b2tlbiBieSBhdXRoZW50aWNhdGluZyB0aGUgdXNlciB3aG8gaXMgdXNpbmcgeW91clxuICAgKiAgICAgICAgICBhcHBsaWNhdGlvbiB3aXRoIGEgd2ViIGlkZW50aXR5IHByb3ZpZGVyIGJlZm9yZSB0aGUgYXBwbGljYXRpb24gbWFrZXMgYW5cbiAgICogICAgICAgICAgICAgPGNvZGU+QXNzdW1lUm9sZVdpdGhXZWJJZGVudGl0eTwvY29kZT4gY2FsbC4gPC9wPlxuICAgKi9cbiAgV2ViSWRlbnRpdHlUb2tlbjogc3RyaW5nO1xufVxuZXhwb3J0IGludGVyZmFjZSBGcm9tVG9rZW5GaWxlSW5pdCB7XG4gIC8qKlxuICAgKiBGaWxlIGxvY2F0aW9uIG9mIHdoZXJlIHRoZSBgT0lEQ2AgdG9rZW4gaXMgc3RvcmVkLlxuICAgKi9cbiAgd2ViSWRlbnRpdHlUb2tlbkZpbGU/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBJQU0gcm9sZSB3YW50aW5nIHRvIGJlIGFzc3VtZWQuXG4gICAqL1xuICByb2xlQXJuPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgSUFNIHNlc3Npb24gbmFtZSB1c2VkIHRvIGRpc3Rpbmd1aXNoIHNlc3Npb25zLlxuICAgKi9cbiAgcm9sZVNlc3Npb25OYW1lPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBBIGZ1bmN0aW9uIHRoYXQgYXNzdW1lcyBhIHJvbGUgd2l0aCB3ZWIgaWRlbnRpdHkgYW5kIHJldHVybnMgYSBwcm9taXNlIGZ1bGZpbGxlZCB3aXRoXG4gICAqIGNyZWRlbnRpYWxzIGZvciB0aGUgYXNzdW1lZCByb2xlLlxuICAgKlxuICAgKiBAcGFyYW0gc291cmNlQ3JlZHMgVGhlIGNyZWRlbnRpYWxzIHdpdGggd2hpY2ggdG8gYXNzdW1lIGEgcm9sZS5cbiAgICogQHBhcmFtIHBhcmFtc1xuICAgKi9cbiAgcm9sZUFzc3VtZXJXaXRoV2ViSWRlbnRpdHk/OiAocGFyYW1zOiBBc3N1bWVSb2xlV2l0aFdlYklkZW50aXR5UGFyYW1zKSA9PiBQcm9taXNlPENyZWRlbnRpYWxzPjtcbn1cblxuLyoqXG4gKiBSZXByZXNlbnRzIE9JREMgY3JlZGVudGlhbHMgZnJvbSBhIGZpbGUgb24gZGlzay5cbiAqL1xuZXhwb3J0IGNvbnN0IGZyb21Ub2tlbkZpbGUgPSAoaW5pdDogRnJvbVRva2VuRmlsZUluaXQpOiBDcmVkZW50aWFsUHJvdmlkZXIgPT4gYXN5bmMgKCkgPT4ge1xuICBjb25zdCB7IHdlYklkZW50aXR5VG9rZW5GaWxlLCByb2xlQXJuLCByb2xlU2Vzc2lvbk5hbWUsIHJvbGVBc3N1bWVyV2l0aFdlYklkZW50aXR5IH0gPSBpbml0O1xuXG4gIGlmICghcm9sZUFzc3VtZXJXaXRoV2ViSWRlbnRpdHkpIHtcbiAgICB0aHJvdyBuZXcgUHJvdmlkZXJFcnJvcihcbiAgICAgIGBSb2xlIEFybiAnJHtyb2xlQXJuID8/IHByb2Nlc3MuZW52W0VOVl9ST0xFX0FSTl19JyBuZWVkcyB0byBiZSBhc3N1bWVkIHdpdGggd2ViIGlkZW50aXR5LGAgK1xuICAgICAgICBgIGJ1dCBubyByb2xlIGFzc3VtcHRpb24gY2FsbGJhY2sgd2FzIHByb3ZpZGVkLmAsXG4gICAgICBmYWxzZVxuICAgICk7XG4gIH1cblxuICByZXR1cm4gcm9sZUFzc3VtZXJXaXRoV2ViSWRlbnRpdHkoe1xuICAgIFdlYklkZW50aXR5VG9rZW46IHJlYWRGaWxlU3luYyh3ZWJJZGVudGl0eVRva2VuRmlsZSA/PyBwcm9jZXNzLmVudltFTlZfVE9LRU5fRklMRV0hLCB7IGVuY29kaW5nOiBcImFzY2lpXCIgfSksXG4gICAgUm9sZUFybjogcm9sZUFybiA/PyBwcm9jZXNzLmVudltFTlZfUk9MRV9BUk5dISxcbiAgICBSb2xlU2Vzc2lvbk5hbWU6IHJvbGVTZXNzaW9uTmFtZSA/PyBwcm9jZXNzLmVudltFTlZfUk9MRV9TRVNTSU9OX05BTUVdID8/IGBhd3Mtc2RrLWpzLXNlc3Npb24tJHtEYXRlLm5vdygpfWAsXG4gIH0pO1xufTtcbiJdfQ==